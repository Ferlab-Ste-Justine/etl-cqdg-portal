datalake {
    args=[]
    sources=[
        {
            format=DELTA
            id="normalized_snv"
            keys=[]
            loadtype=OverWritePartition
            partitionby=[
                "study_id",
                chromosome
            ]
            path="/normalized/snv"
            readoptions {}
            repartition {
                column-names=[
                    chromosome
                ]
                kind=RepartitionByColumns
                n=100
                sort-columns=[]
            }
            storageid=storage
            table {
                database=normalized
                name="normalized_snv"
            }
            writeoptions {
                "created_on_column"="created_on"
                "is_current_column"="is_current"
                overwriteSchema="true"
                "updated_on_column"="updated_on"
                "valid_from_column"="valid_from"
                "valid_to_column"="valid_to"
            }
        },
        {
            format=DELTA
            id="normalized_consequences"
            keys=[
                chromosome,
                start,
                reference,
                alternate,
                "ensembl_transcript_id"
            ]
            loadtype=Scd1
            partitionby=[
                chromosome
            ]
            path="/normalized/consequences"
            readoptions {}
            repartition {
                column-names=[
                    chromosome
                ]
                kind=RepartitionByColumns
                n=10
                sort-columns=[]
            }
            storageid=storage
            table {
                database=normalized
                name="normalized_consequences"
            }
            writeoptions {
                "created_on_column"="created_on"
                "is_current_column"="is_current"
                "updated_on_column"="updated_on"
                "valid_from_column"="valid_from"
                "valid_to_column"="valid_to"
            }
        },
        {
            format=VCF
            id="raw_vcf"
            keys=[
                chromosome,
                start,
                reference,
                alternate,
                "ensembl_transcript_id"
            ]
            loadtype=OverWrite
            partitionby=[
                chromosome
            ]
            path="/{{PREFIX}}/{{STUDY_NAME}}/*.vep.vcf.gz"
            readoptions {}
            repartition {
                column-names=[
                    chromosome
                ]
                kind=RepartitionByColumns
                n=10
                sort-columns=[]
            }
            storageid="storage_vcf"
            table {
                database=normalized
                name="normalized_consequences"
            }
            writeoptions {
                "created_on_column"="created_on"
                "is_current_column"="is_current"
                "updated_on_column"="updated_on"
                "valid_from_column"="valid_from"
                "valid_to_column"="valid_to"
            }
        },
        {
            format=DELTA
            id="enriched_specimen"
            keys=[]
            loadtype=OverWritePartition
            partitionby=[
                "study_id"
            ]
            path="/enriched/specimen"
            readoptions {}
            storageid=storage
            table {
                database=normalized
                name="enriched_specimen"
            }
            writeoptions {
                "created_on_column"="created_on"
                "is_current_column"="is_current"
                overwriteSchema="true"
                "updated_on_column"="updated_on"
                "valid_from_column"="valid_from"
                "valid_to_column"="valid_to"
            }
        }
    ]
    sparkconf {
        "spark.databricks.delta.merge.repartitionBeforeWrite.enabled"="true"
        "spark.databricks.delta.retentionDurationCheck.enabled"="false"
        "spark.databricks.delta.schema.autoMerge.enabled"="true"
        "spark.delta.merge.repartitionBeforeWrite"="true"
        "spark.sql.autoBroadcastJoinThreshold"="-1"
        "spark.sql.catalog.spark_catalog"="org.apache.spark.sql.delta.catalog.DeltaCatalog"
        "spark.sql.extensions"="io.delta.sql.DeltaSparkSessionExtension"
        "spark.sql.legacy.parquet.datetimeRebaseModeInWrite"=CORRECTED
        "spark.sql.legacy.timeParserPolicy"=CORRECTED
        "spark.sql.mapKeyDedupPolicy"="LAST_WIN"
        "spark.executor.memory"=7g
    }
    storages=[
        {
            filesystem=S3
            id=storage
            path="s3a://cqdg-qa-app-clinical-data-service"
        },
        {
            filesystem=S3
            id="storage_vcf"
            path="s3a://cqdg-ops-app-fhir-import-file-data"
        }
    ]
}
